/* =========================================================================

  Program:   Multiple Projector Library
  Language:  C++
  Date:      $Date$
  Version:   $Revision$

  Copyright (c) 2013 Scalable Display Technologies, Inc.
  All Rights Reserved
  The source code contained herein is confidential and is considered a 
  trade secret of Scalable Display Technologies, Inc

===================================================================auto== */
// .NAME EasyBlendSDK - the API for the EasyBLend OpenGL SDK
// .SECTION Description
//
// The EasyBLEND SDK is a small set of functions that operate on an
// EasyBlendSDK_Mesh structure.  This structure is where ALL of the
// SDK state is stored.  This means that there can be multiple
// Mesh structures used in a single program.  Eash Mesh structure is
// initialized with data from a particular .ol or .pol mesh file ( generated
// by the EasyBlend calibration system )
//
// The purpose of the EasyBlend SDK is to take an input rendered image
// and warp it using the calibration data generated by the EasyBlend
// calibration system.  As such, the SDK allows selecting where the input
// data resides ( can be a particualr GL buffer or a Texture ) as well as
// the resulting output location ( which GL buffer ).  By default, the SDK
// assumes that the data already resides in the GL BACK buffer before the
// call to EasyBlendSDK_TransformInputToOutput, and that the output of 
// the calibration should be written back into the GL BACK buffer.
//
// The SDK methods all return errorcodes which should ALWAYS be checked.
// 
// .SECTION Usage
// EasyBLendSDK_Mesh gMesh;
// err = EasyBlendSDK_Initialize( <mesh-ol-filename>, &gMesh )
// <check errorcode err>
// <set the OpenGL view ( projection matrix ) based on gMesh>
// <Note: see example code for the SetView function>
// ....
// <in display loop, right before SwapBuffers>
// err = EasyBlendSDK_TransformInputToOutput( &gMesh )
// <check errorcode err>
// ....
// <at program exit>
// err = EayBlendSDK_Uninitialize( &gMesh )
// <check errorcode err>
// 

#ifndef _EasyBlendSDK_H_
#define _EasyBlendSDK_H_

#include "EasyBlendSDKPlatforms.h"

#include "EasyBlendSDKMesh.h"
#include "EasyBlendSDKErrors.h"

// ============================================
// === Standard Functions that Everyone uses.
// ============================================

// Description:
// Initializes a Mesh structure from an EasyBLend calibration file
// (typically a .ol file orf .pol file for dynamic eyepoint).  This
// call MUST be made when a valid OpenGL context has been
// created. Otherwise the EasyBlend SDK will conclude that you only
// have OpenGL 1.0 support. The given Mesh pointer should be allocated
// ( not NULL ) and will be overwritten.
//
EasyBlendSDK_API EasyBlendSDKError
EasyBlendSDK_Initialize( const char* Filename,
                         EasyBlendSDK_Mesh* msm);


// Description:
// Given a correctly initialized SDK Mesh, releases the resources used
// by the Mesh structure.  The Mesh pointer memory must still be
// externally deallocated after this call.
EasyBlendSDK_API EasyBlendSDKError
EasyBlendSDK_Uninitialize( EasyBlendSDK_Mesh* msm );


// Description:
// Takes an input rendered scene and warps it according to the given
// calibration mesh, rendering the output to an OpenGL buffer.
// The input and output locations must be set by calling the
// various SetInput* and SetOutput* EasyBlend SDK calls.  The
// Input and output default to both being the OpenGL BACK buffer.
EasyBlendSDK_API EasyBlendSDKError
EasyBlendSDK_TransformInputToOutput ( EasyBlendSDK_Mesh* msm );

#endif  /* ifndef _EasyBlendSDK_H_ */

