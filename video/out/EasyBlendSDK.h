/* =========================================================================

  Program:   Multiple Projector Library
  Language:  C++
  Date:      $Date$
  Version:   $Revision$

  Copyright (c) 2013 Scalable Display Technologies, Inc.
  All Rights Reserved
  The source code contained herein is confidential and is considered a 
  trade secret of Scalable Display Technologies, Inc

===================================================================auto== */
// .NAME EasyBlendSDK - the API for the EasyBLend OpenGL SDK
// .SECTION Description
//
// The EasyBLEND SDK is a small set of functions that operate on an
// EasyBlendSDK_Mesh structure.  This structure is where ALL of the
// SDK state is stored.  This means that there can be multiple
// Mesh structures used in a single program.  Eash Mesh structure is
// initialized with data from a particular .ol or .pol mesh file ( generated
// by the EasyBlend calibration system )
//
// The purpose of the EasyBlend SDK is to take an input rendered image
// and warp it using the calibration data generated by the EasyBlend
// calibration system.  As such, the SDK allows selecting where the input
// data resides ( can be a particualr GL buffer or a Texture ) as well as
// the resulting output location ( which GL buffer ).  By default, the SDK
// assumes that the data already resides in the GL BACK buffer before the
// call to EasyBlendSDK_TransformInputToOutput, and that the output of 
// the calibration should be written back into the GL BACK buffer.
//
// The SDK methods all return errorcodes which should ALWAYS be checked.
// 
// .SECTION Usage
// EasyBLendSDK_Mesh gMesh;
// err = EasyBlendSDK_Initialize( <mesh-ol-filename>, &gMesh )
// <check errorcode err>
// <set the OpenGL view ( projection matrix ) based on gMesh>
// <Note: see example code for the SetView function>
// ....
// <in display loop, right before SwapBuffers>
// err = EasyBlendSDK_TransformInputToOutput( &gMesh )
// <check errorcode err>
// ....
// <at program exit>
// err = EayBlendSDK_Uninitialize( &gMesh )
// <check errorcode err>
// 

#ifndef _EasyBlendSDK_H_
#define _EasyBlendSDK_H_

#include <vector>

#include "EasyBlendSDKPlatforms.h"

#include "EasyBlendSDKMesh.h"
#include "EasyBlendSDKErrors.h"

// ============================================
// === Standard Functions that Everyone uses.
// ============================================

// Description:
// Initializes a Mesh structure from an EasyBLend calibration file
// (typically a .ol file orf .pol file for dynamic eyepoint).  This
// call MUST be made when a valid OpenGL context has been
// created. Otherwise the EasyBlend SDK will conclude that you only
// have OpenGL 1.0 support. The given Mesh pointer should be allocated
// ( not NULL ) and will be overwritten.
//
EasyBlendSDK_API EasyBlendSDKError
EasyBlendSDK_Initialize( const char* Filename,
                         EasyBlendSDK_Mesh* msm);


// Description:
// Given a correctly initialized SDK Mesh, releases the resources used
// by the Mesh structure.  The Mesh pointer memory must still be
// externally deallocated after this call.
EasyBlendSDK_API EasyBlendSDKError
EasyBlendSDK_Uninitialize( EasyBlendSDK_Mesh* msm );


// Description:
// Takes an input rendered scene and warps it according to the given
// calibration mesh, rendering the output to an OpenGL buffer.
// The input and output locations must be set by calling the
// various SetInput* and SetOutput* EasyBlend SDK calls.  The
// Input and output default to both being the OpenGL BACK buffer.
EasyBlendSDK_API EasyBlendSDKError
EasyBlendSDK_TransformInputToOutput ( EasyBlendSDK_Mesh* msm );


// ============================================
// === Functions For Optimizing Buffer/Texture us.
// === Setting an input buffer/texture removes a texture copy 
// === and improves performance.
// ============================================


// Description:
// Set the ReadBuffer to use as input for the SDK
// ( Defaults to GL_BACK )
// The given buffer MUST be the same resolution as the
// mesh ( given by the XRes and YRes fields ).
// If this is not the case, you must use a Texture as input
// and first render the data onto it.
EasyBlendSDK_API EasyBlendSDKError 
EasyBlendSDK_SetInputReadBuffer( EasyBlendSDK_Mesh* msm,
                                 EasyBlendSDKGLBuffer ReadBuffer );

// Description:
// Set a particular Texture as input to the SDK
EasyBlendSDK_API EasyBlendSDKError 
EasyBlendSDK_SetInputTexture2D( EasyBlendSDK_Mesh* msm,
                                EasyBlendSDKGLTexture Texture );

// Description:
// Set a rectangular sub-region of a Texture as input to the SDK
// Texture space goes from 0 -> 1 inclusive
//
// Parameters:
//    offsets and width/Height are in TEXTURE space ( so normalized to (0,1) range )
EasyBlendSDK_API EasyBlendSDKError
EasyBlendSDK_SetInputSubTexture2D( EasyBlendSDK_Mesh* msm,
                                   EasyBlendSDKGLTexture Texture, 
                                   double XOffset,
                                   double YOffset,
                                   double Width,
                                   double Height );

// Description:
// Set a rectangular subregion of an image loaded as a texture 
// as input to the SDK.
//
// Parameters:
//    ImageWidth and Height are the pixel resolution of the textxure
//    PixelXOffset and PixelYOffset are in pixels
//    Width and Height are in pixels
EasyBlendSDK_API EasyBlendSDKError
EasyBlendSDK_SetInputSubImageTexture2D( EasyBlendSDK_Mesh* msm,
                                        EasyBlendSDKGLTexture Texture, 
                                        unsigned int ImageWidth,   
                                        unsigned int ImageHeight,
                                                 int PixelXOffset,
                                                 int PixelYOffset,
                                        unsigned int Width,        
                                        unsigned int Height );


// Description:
// Set a particular DrawBuffer as the output buffer for the SDK
// ( defaults to GL_BACK )
EasyBlendSDK_API EasyBlendSDKError
EasyBlendSDK_SetOutputDrawBuffer( EasyBlendSDK_Mesh* msm,
                                  EasyBlendSDKGLBuffer DrawBuffer );

// Description:
// Set a particular DrawBuffer as the output buffer for the SDK
// ( defaults to GL_BACK )
// 
// Parameters:
//     Width and Height are int PIXELS worth of output
EasyBlendSDK_API EasyBlendSDKError
EasyBlendSDK_SetOutputDrawSubBuffer( EasyBlendSDK_Mesh* msm,
                                     EasyBlendSDKGLBuffer DrawBuffer,
                                     int Width, int Height );

// Description:
// Set a particular DrawBuffer as the output buffer for the SDK
// ( defaults to GL_BACK )
// 
// Parameters:
//     Width and Height are int PIXELS worth of output
EasyBlendSDK_API EasyBlendSDKError
EasyBlendSDK_SetOutputDrawSubBufferWithOffset( EasyBlendSDK_Mesh* msm,
                                               EasyBlendSDKGLBuffer DrawBuffer,
                                               int Offsetx, int Offsety,
                                               int Width, int Height );

// ============================================
// ========== Misc Functions
// ============================================

// Description:
// Set the texture sampling to be used during a call to
// TransformInputToOutput.  IMPORTANT: This is a debugging command to
// allow easy comparisons of sampling modes. Cubic filtering is only
// supported on graphics hardware and drivers that can handle GLSL
// shaders. On pre-GLSL hardware, the error UNSUPPORTED_IN_HARDWARE is
// returned.
EasyBlendSDK_API EasyBlendSDKError
EasyBlendSDK_SetSampling(EasyBlendSDK_Mesh* msm,
                         unsigned int sampling);


// Description:
// This command returns the view angles for the instance of the SDK.
// As Heading, then Pitch then Roll. The Angles are pre-computed in
// the SDK file, so that it only works with newer version of EasyBlend
// that write this information to disk. (Newer than Nov 2011 or newer)
EasyBlendSDK_API EasyBlendSDKError EasyBlendSDK_GetHeadingPitchRoll (
    double& rdDegreesHeading, double& rdDegreesPitch, double& rdDegreesRoll,
    EasyBlendSDK_Mesh* msm);

// Description:
// This comand is used only for Dynamic Eyepoint. The new location of 
// the viewer is sent to the command, and a new frustum is calculated. 
// To use this funciotn, the Inititalixe command must have been called
// with a .pol file. After this call, remember to get new frustum and
// use it to update the OpenGL frustum. This command is currently CPU
// bound.
EasyBlendSDK_API EasyBlendSDKError
EasyBlendSDK_SetEyepoint(EasyBlendSDK_Mesh* msm,
                         const double& eyeX,
                         const double& eyeY,
                         const double& eyeZ);

// Description:
// This command sets the gamma.
EasyBlendSDK_API EasyBlendSDKError 
EasyBlendSDK_SetGamma(EasyBlendSDK_Mesh* msm, const float gamma, 
                      const int MaxAlpha);

// Description:
// Sets a lookup table to transform the current alpha channel
EasyBlendSDK_API EasyBlendSDKError
EasyBlendSDK_SetLookupTable(EasyBlendSDK_Mesh* msm, const std::vector<int>& lookup);

// Description:
// Set SDK profiling options. This call has no effect without
// a profiling build of the SDK.
//
// Parameters:
//     flags is a bitwise combination of the profiling flags defined
//     in EasyBlendSDKTypes.h.
EasyBlendSDK_API EasyBlendSDKError
EasyBlendSDK_SetProfilingFlags(EasyBlendSDK_Mesh* msm,
                               unsigned int flags);

// Description:
// Almost all users want the EasyBlend SDK to clear the output buffer
// before rendering to it. But, some specialized users need to turn it off.
// Please Call Initialize First(). Returns errors for NULL pointers or
// uninitialized pointers only.
EasyBlendSDK_API EasyBlendSDKError
EasyBlendSDK_SetClearOutputBeforeRendering(EasyBlendSDK_Mesh* msm,
                                           const bool &ShouldClear);
EasyBlendSDK_API EasyBlendSDKError
EasyBlendSDK_GetClearOutputBeforeRendering(EasyBlendSDK_Mesh* msm,
                                           bool &ShouldClear);

// Description:
// Get the label identifying the mesh file.
EasyBlendSDK_API EasyBlendSDKError
EasyBlendSDK_GetMeshLabel(char Label[256], EasyBlendSDK_Mesh* msm);

// ============================================
// ========== Functions below are deprecated
// ============================================


// Description:
// <DEPRECATED>
// Please refer to EasyBlendSDK_Initialize call
EasyBlendSDK_API 
EASYBLENDSDK_DEPRECATED_CALL(
"Initialize is deprecated. Use EasyBlendSDK_Initialize instead.",
EasyBlendSDKError Initialize(const char* szFileName,
                             EasyBlendSDK_Mesh* msm)
);

// Description:
// <DEPRECATED>
// Please refer to EasyBlendSDK_Uninitialize call
EasyBlendSDK_API 
EASYBLENDSDK_DEPRECATED_CALL(
"UnInitialize is deprecated. Use EasyBlendSDK_UnInitialize instead.",
EasyBlendSDKError Uninitialize(EasyBlendSDK_Mesh* msm)
);

// Description:
// <DEPRECATED>
// Please refer to EasyBlendSDK_TransformInputToOutput call
EasyBlendSDK_API 
EASYBLENDSDK_DEPRECATED_CALL(
"OpenGLSwap is deprecated. Use EasyBlendSDK_TransformInputToOutput instead.",
EasyBlendSDKError OpenGLSwap(EasyBlendSDK_Mesh* msm)
);


// Description:
// <DEPRECATED>
// <NOT_IMPLEMENTED>
EasyBlendSDK_API EASYBLENDSDK_DEPRECATED_CALL(
"DirectXSwap sholud not be used in an OpenGL program at all.",
EasyBlendSDKError DirectXSwap(EasyBlendSDK_Mesh* msm)
);


#endif  /* ifndef _EasyBlendSDK_H_ */

